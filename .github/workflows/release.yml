name: build-and-release

on:
  push:
    branches: [ main, master ]
    tags: [ "v*" ]
  pull_request:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build matrix
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          # --- Linux ---
          - { goos: linux,   goarch: amd64 }
          - { goos: linux,   goarch: arm64 }
          - { goos: linux,   goarch: "386" }
          - { goos: linux,   goarch: arm,   goarm: "7" }
          - { goos: linux,   goarch: arm,   goarm: "6" }
          - { goos: linux,   goarch: ppc64le }
          - { goos: linux,   goarch: s390x }
          - { goos: linux,   goarch: riscv64 }

          # --- Windows ---
          - { goos: windows, goarch: amd64 }
          - { goos: windows, goarch: arm64 }
          - { goos: windows, goarch: "386" }

          # --- macOS (Darwin) ---
          - { goos: darwin,  goarch: amd64 }
          - { goos: darwin,  goarch: arm64 }

          # --- BSDs ---
          - { goos: freebsd, goarch: amd64 }
          - { goos: freebsd, goarch: arm64 }
          - { goos: openbsd, goarch: amd64 }
          - { goos: openbsd, goarch: arm64 }
          - { goos: netbsd,  goarch: amd64 }
          - { goos: netbsd,  goarch: arm64 }

          # --- Others commonly supported by Go ---
          - { goos: dragonfly, goarch: amd64 }
          - { goos: solaris,   goarch: amd64 }
          - { goos: aix,       goarch: ppc64 }
          - { goos: plan9,     goarch: amd64 }

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Compute version metadata
        id: meta
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            echo "version=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"
          else
            shortsha="$(git rev-parse --short HEAD)"
            echo "version=dev-${shortsha}" >> "$GITHUB_OUTPUT"
          fi

      - name: Build
        env:
          CGO_ENABLED: "0"
          GOOS:  ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOARM: ${{ matrix.goarm || '' }}
        run: |
          mkdir -p dist
          BIN_NAME="xbm2gdshader"
          EXT=""
          if [[ "${GOOS}" == "windows" ]]; then EXT=".exe"; fi

          ARM_SUFFIX=""
          if [[ -n "${GOARM}" ]]; then ARM_SUFFIX="_arm${GOARM}"; fi

          OUT="dist/${BIN_NAME}_${GOOS}_${GOARCH}${ARM_SUFFIX}${EXT}"

          # Optional: set version var in main package (add: `var version = "dev"` in main.go)
          LDFLAGS="-s -w -X 'main.version=${{ steps.meta.outputs.version }}'"

          go build -trimpath -ldflags "${LDFLAGS}" -o "${OUT}" ./...

          echo "Built ${OUT}"

      - name: Package (zip/tar.gz)
        shell: bash
        run: |
          cd dist
          # Package one artifact per target as archive including LICENSE/README if present
          SRC_BIN=$(ls xbm2gdshader_*_${{ matrix.goarch }}* | head -n1)
          PKG_BASENAME="${SRC_BIN%.*}"
          if [[ "${{ matrix.goos }}" == "windows" ]]; then
            PKG="${PKG_BASENAME}.zip"
            zip -q "${PKG}" "${SRC_BIN}" ../README.md ../LICENSE 2>/dev/null || zip -q "${PKG}" "${SRC_BIN}"
          else
            PKG="${PKG_BASENAME}.tar.gz"
            tar -czf "${PKG}" "${SRC_BIN}" ../README.md ../LICENSE 2>/dev/null || tar -czf "${PKG}" "${SRC_BIN}"
          fi
          echo "package=${PKG}" >> $GITHUB_OUTPUT
        id: pkg

      - name: Upload artifact (CI)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goarm && format('-arm{0}', matrix.goarm) || '' }}
          path: |
            dist/xbm2gdshader_*_${{ matrix.goarch }}*
            dist/*.zip
            dist/*.tar.gz
          if-no-files-found: error
          retention-days: 7

      - name: Attach to GitHub Release (on tags)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            dist/*.zip
            dist/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
